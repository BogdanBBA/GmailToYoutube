using System;
using System.Xml;
using GmailToYoutube.BBA.VisualComponents;

namespace GmailToYoutube
{
    /// <summary>
    /// Contains general settings regarding the behaviour of presentation of the app.
    /// </summary>
    public class Settings
    {
        public static readonly string[] VideoResolutions = { "small", "medium", "large", "hd720", "hd1080", "hd1440" };
        public static readonly string[] VideoResolutionDescriptions = { "240p", "360p", "480p", "720p", "1080p", "1440p" };

        public enum VideoThumbnailGrayscaleOptions { Never, WhenNew, WhenNotNew, WhenMarkedToDelete, Always };
        public static readonly string[] VideoThumbnailGrayscaleOptionsDescriptions = { "Never", "When marked as new", "When marked as seen", "When marked to delete", "Always" };

        public enum VideoSortingOptions { Alphabetically, Chronologically, ByDuration };
        public static readonly string[] VideoSortingOptionsDescriptions = { "Alphabetically", "Chronologically", "By duration" };

        public enum YoutuberSortingOptions { Alphabetically, Chronologically, ByNumberOfVideos, ByTotalDuration };
        public static readonly string[] YoutuberSortingOptionsDescriptions = { "Alphabetically", "Chronologically", "By number of videos", "By total duration" };

        public enum VideoDoubleClickActions { None, MarkToDelete, OpenYoutube, OpenVideo, AddToPlaylist };
        public static readonly string[] VideoDoubleClickActionDescriptions = { "None", "Mark to delete", "Open Youtube", "Open video", "Add to playlist" };

        public enum PlaylistOpenActions { None, MarkToDelete };
        public static readonly string[] PlaylistOpenActionDescriptions = { "None", "Mark to delete" };

        public enum ThumbnailClickActions { None, OpenImageURL, OpenLocalFile, OpenYoutube, OpenVideo };
        public static readonly string[] ThumbnailClickActionDescriptions = { "None", "Open image URL", "Open local file", "Open Youtube", "Open video" };

        public bool AutomaticallyLogInAtStartup { get; set; }
        public bool ForceUpdateOldVideoStats { get; set; }
        public bool ForceUpdateVideoAndYoutuberImages { get; set; }
        public bool MarkEmailsAsRead { get; set; }
        public AbstractYoutuberVideoControl.ControlSizes ControlSize { get; set; }
        public bool YoutuberControlStateOnStartupOrUpdateIsExpanded { get; set; }
        public bool ShowYoutuberThumbnailAsCircle { get; set; }
        public bool ShowYoutuberThumbnailsInsteadOfIcons { get; set; }
        public bool ShowVideoThumbnailsInsteadOfIcons { get; set; }
        public bool DisplayChannelNameOnChannelLinkButton { get; set; }
        public VideoThumbnailGrayscaleOptions VideoThumbnailGrayscale { get; set; }
        public VideoSortingOptions VideoSorting { get; set; }
        public YoutuberSortingOptions YoutuberSorting { get; set; }
        public int ListScrollAmount { get; set; }
        public int ListWidthPercentage { get; set; }
        public int PlaylistWidthPercentage { get; set; }
        public VideoDoubleClickActions VideoDoubleClickAction { get; set; }
        public PlaylistOpenActions PlaylistOpenAction { get; set; }
        public int VideoResolutionIndex { get; set; }
        public int SecondsToSkipInVideo { get; set; }
        public ThumbnailClickActions ThumbnailClickAction { get; set; }
        public bool HideAppWhileWatchingVideo { get; set; }
        public bool MarkToDeleteVideoAfterWatching { get; set; }
        public bool AltTabWindowInsteadOfHiding { get; set; }
        public bool OpenLinksInInternalBrowser { get; set; }
        public bool AllowInternalBrowserNavigation { get; set; }
        public bool CloseInternalBrowserPageWhenVideoUnfocused { get; set; }

        internal string AutoGeneratedPlaylistID { get; set; }
        internal bool StillInitializing { get; set; }

        public Settings()
        {
            this.StillInitializing = true;
        }

        public void LoadFromXmlNode(XmlNode settingsNode)
        {
            try
            { this.AutomaticallyLogInAtStartup = bool.Parse(settingsNode.SelectSingleNode("AutomaticallyLogInAtStartup").Attributes["value"].Value); }
            catch (Exception) { this.AutomaticallyLogInAtStartup = false; }

            try
            { this.ForceUpdateOldVideoStats = bool.Parse(settingsNode.SelectSingleNode("ForceUpdateOldVideoStats").Attributes["value"].Value); }
            catch (Exception) { this.ForceUpdateOldVideoStats = true; }

            try
            { this.ForceUpdateVideoAndYoutuberImages = bool.Parse(settingsNode.SelectSingleNode("ForceUpdateVideoAndYoutuberImages").Attributes["value"].Value); }
            catch (Exception) { this.ForceUpdateOldVideoStats = true; }

            try
            { this.MarkEmailsAsRead = bool.Parse(settingsNode.SelectSingleNode("MarkEmailsAsRead").Attributes["value"].Value); }
            catch (Exception) { this.MarkEmailsAsRead = false; }

            try
            { this.ControlSize = (AbstractYoutuberVideoControl.ControlSizes) Enum.Parse(typeof(AbstractYoutuberVideoControl.ControlSizes), settingsNode.SelectSingleNode("ControlSize").Attributes["value"].Value, false); }
            catch (Exception) { this.ControlSize = AbstractYoutuberVideoControl.ControlSizes.Large; }

            try
            { this.YoutuberControlStateOnStartupOrUpdateIsExpanded = bool.Parse(settingsNode.SelectSingleNode("YoutuberControlStateOnStartupOrUpdateIsExpanded").Attributes["value"].Value); }
            catch (Exception) { this.YoutuberControlStateOnStartupOrUpdateIsExpanded = false; }

            try
            { this.ShowYoutuberThumbnailAsCircle = bool.Parse(settingsNode.SelectSingleNode("ShowYoutuberThumbnailAsCircle").Attributes["value"].Value); }
            catch (Exception) { this.ShowYoutuberThumbnailAsCircle = true; }

            try
            { this.ShowYoutuberThumbnailsInsteadOfIcons = bool.Parse(settingsNode.SelectSingleNode("ShowYoutuberThumbnailsInsteadOfIcons").Attributes["value"].Value); }
            catch (Exception) { this.ShowYoutuberThumbnailsInsteadOfIcons = true; }

            try
            { this.ShowVideoThumbnailsInsteadOfIcons = bool.Parse(settingsNode.SelectSingleNode("ShowVideoThumbnailsInsteadOfIcons").Attributes["value"].Value); }
            catch (Exception) { this.ShowVideoThumbnailsInsteadOfIcons = true; }

            try
            { this.DisplayChannelNameOnChannelLinkButton = bool.Parse(settingsNode.SelectSingleNode("DisplayChannelNameOnChannelLinkButton").Attributes["value"].Value); }
            catch (Exception) { this.DisplayChannelNameOnChannelLinkButton = true; }

            try
            { this.VideoThumbnailGrayscale = (VideoThumbnailGrayscaleOptions) Enum.Parse(VideoThumbnailGrayscaleOptions.Never.GetType(), settingsNode.SelectSingleNode("VideoThumbnailGrayscale").Attributes["value"].Value, false); }
            catch (Exception) { this.VideoThumbnailGrayscale = VideoThumbnailGrayscaleOptions.Never; }

            try
            { this.VideoSorting = (VideoSortingOptions) Enum.Parse(VideoSortingOptions.Alphabetically.GetType(), settingsNode.SelectSingleNode("VideoSorting").Attributes["value"].Value, false); }
            catch (Exception) { this.VideoSorting = VideoSortingOptions.Chronologically; }

            try
            { this.YoutuberSorting = (YoutuberSortingOptions) Enum.Parse(YoutuberSortingOptions.Alphabetically.GetType(), settingsNode.SelectSingleNode("YoutuberSorting").Attributes["value"].Value, false); }
            catch (Exception) { this.YoutuberSorting = YoutuberSortingOptions.Chronologically; }

            try
            { this.ListScrollAmount = Int32.Parse(settingsNode.SelectSingleNode("ListScrollAmount").Attributes["value"].Value); }
            catch (Exception) { this.ListScrollAmount = 75; }

            try
            { this.ListWidthPercentage = Int32.Parse(settingsNode.SelectSingleNode("ListWidthPercentage").Attributes["value"].Value); }
            catch (Exception) { this.ListWidthPercentage = 40; }

            try
            { this.PlaylistWidthPercentage = Int32.Parse(settingsNode.SelectSingleNode("PlaylistWidthPercentage").Attributes["value"].Value); }
            catch (Exception) { this.PlaylistWidthPercentage = 20; }

            try
            { this.VideoDoubleClickAction = (VideoDoubleClickActions) Enum.Parse(VideoDoubleClickActions.MarkToDelete.GetType(), settingsNode.SelectSingleNode("VideoDoubleClickAction").Attributes["value"].Value, false); }
            catch (Exception) { this.VideoDoubleClickAction = VideoDoubleClickActions.MarkToDelete; }

            try
            { this.PlaylistOpenAction = (PlaylistOpenActions) Enum.Parse(PlaylistOpenActions.None.GetType(), settingsNode.SelectSingleNode("PlaylistOpenAction").Attributes["value"].Value, false); }
            catch (Exception) { this.PlaylistOpenAction = PlaylistOpenActions.MarkToDelete; }

            try
            { this.VideoResolutionIndex = Int32.Parse(settingsNode.SelectSingleNode("VideoResolutionIndex").Attributes["value"].Value); }
            catch (Exception) { this.VideoResolutionIndex = 3; }

            try
            { this.SecondsToSkipInVideo = Int32.Parse(settingsNode.SelectSingleNode("SecondsToSkipInVideo").Attributes["value"].Value); }
            catch (Exception) { this.SecondsToSkipInVideo = 0; }

            try
            { this.ThumbnailClickAction = (ThumbnailClickActions) Enum.Parse(ThumbnailClickActions.None.GetType(), settingsNode.SelectSingleNode("ThumbnailClickAction").Attributes["value"].Value, false); }
            catch (Exception) { this.ThumbnailClickAction = ThumbnailClickActions.OpenImageURL; }

            try
            { this.HideAppWhileWatchingVideo = bool.Parse(settingsNode.SelectSingleNode("HideAppWhileWatchingVideo").Attributes["value"].Value); }
            catch (Exception) { this.HideAppWhileWatchingVideo = false; }

            try
            { this.MarkToDeleteVideoAfterWatching = bool.Parse(settingsNode.SelectSingleNode("MarkToDeleteVideoAfterWatching").Attributes["value"].Value); }
            catch (Exception) { this.MarkToDeleteVideoAfterWatching = true; }
            try
            { this.OpenLinksInInternalBrowser = bool.Parse(settingsNode.SelectSingleNode("OpenLinksInInternalBrowser").Attributes["value"].Value); }
            catch (Exception) { this.OpenLinksInInternalBrowser = true; }
            try
            { this.AllowInternalBrowserNavigation = bool.Parse(settingsNode.SelectSingleNode("AllowInternalBrowserNavigation").Attributes["value"].Value); }
            catch (Exception) { this.AllowInternalBrowserNavigation = false; }
            try
            { this.CloseInternalBrowserPageWhenVideoUnfocused = bool.Parse(settingsNode.SelectSingleNode("CloseInternalBrowserPageWhenVideoUnfocused").Attributes["value"].Value); }
            catch (Exception) { this.CloseInternalBrowserPageWhenVideoUnfocused = true; }

            try
            { this.AltTabWindowInsteadOfHiding = bool.Parse(settingsNode.SelectSingleNode("AltTabWindowInsteadOfHiding").Attributes["value"].Value); }
            catch (Exception) { this.AltTabWindowInsteadOfHiding = false; }

            try
            { this.AutoGeneratedPlaylistID = Utils.DecodeNullableString(settingsNode.SelectSingleNode("AutoGeneratedPlaylistID").Attributes["value"].Value); }
            catch (Exception) { this.AutoGeneratedPlaylistID = null; }
        }

        public XmlNode SaveToXmlNode(XmlDocument doc)
        {
            XmlNode root = doc.CreateElement("Settings");

            XmlNode node = root.AppendChild(doc.CreateElement("AutomaticallyLogInAtStartup"));
            node.AddAttribute(doc, "value", this.AutomaticallyLogInAtStartup.ToString());

            node = root.AppendChild(doc.CreateElement("ForceUpdateOldVideoStats"));
            node.AddAttribute(doc, "value", this.ForceUpdateOldVideoStats.ToString());

            node = root.AppendChild(doc.CreateElement("ForceUpdateVideoAndYoutuberImages"));
            node.AddAttribute(doc, "value", this.ForceUpdateVideoAndYoutuberImages.ToString());

            node = root.AppendChild(doc.CreateElement("MarkEmailsAsRead"));
            node.AddAttribute(doc, "value", this.MarkEmailsAsRead.ToString());

            node = root.AppendChild(doc.CreateElement("ControlSize"));
            node.AddAttribute(doc, "value", this.ControlSize.ToString());

            node = root.AppendChild(doc.CreateElement("YoutuberControlStateOnStartupOrUpdateIsExpanded"));
            node.AddAttribute(doc, "value", this.YoutuberControlStateOnStartupOrUpdateIsExpanded.ToString());

            node = root.AppendChild(doc.CreateElement("ShowYoutuberThumbnailAsCircle"));
            node.AddAttribute(doc, "value", this.ShowYoutuberThumbnailAsCircle.ToString());

            node = root.AppendChild(doc.CreateElement("ShowYoutuberThumbnailsInsteadOfIcons"));
            node.AddAttribute(doc, "value", this.ShowYoutuberThumbnailsInsteadOfIcons.ToString());

            node = root.AppendChild(doc.CreateElement("DisplayChannelNameOnChannelLinkButton"));
            node.AddAttribute(doc, "value", this.DisplayChannelNameOnChannelLinkButton.ToString());

            node = root.AppendChild(doc.CreateElement("ShowVideoThumbnailsInsteadOfIcons"));
            node.AddAttribute(doc, "value", this.ShowVideoThumbnailsInsteadOfIcons.ToString());

            node = root.AppendChild(doc.CreateElement("VideoThumbnailGrayscale"));
            node.AddAttribute(doc, "value", this.VideoThumbnailGrayscale.ToString());

            node = root.AppendChild(doc.CreateElement("VideoSorting"));
            node.AddAttribute(doc, "value", this.VideoSorting.ToString());

            node = root.AppendChild(doc.CreateElement("YoutuberSorting"));
            node.AddAttribute(doc, "value", this.YoutuberSorting.ToString());

            node = root.AppendChild(doc.CreateElement("ListScrollAmount"));
            node.AddAttribute(doc, "value", this.ListScrollAmount.ToString());

            node = root.AppendChild(doc.CreateElement("ListWidthPercentage"));
            node.AddAttribute(doc, "value", this.ListWidthPercentage.ToString());

            node = root.AppendChild(doc.CreateElement("PlaylistWidthPercentage"));
            node.AddAttribute(doc, "value", this.PlaylistWidthPercentage.ToString());

            node = root.AppendChild(doc.CreateElement("VideoResolutionIndex"));
            node.AddAttribute(doc, "value", this.VideoResolutionIndex.ToString());

            node = root.AppendChild(doc.CreateElement("VideoDoubleClickAction"));
            node.AddAttribute(doc, "value", this.VideoDoubleClickAction.ToString());

            node = root.AppendChild(doc.CreateElement("PlaylistOpenAction"));
            node.AddAttribute(doc, "value", this.PlaylistOpenAction.ToString());

            node = root.AppendChild(doc.CreateElement("SecondsToSkipInVideo"));
            node.AddAttribute(doc, "value", this.SecondsToSkipInVideo.ToString());

            node = root.AppendChild(doc.CreateElement("ThumbnailClickAction"));
            node.AddAttribute(doc, "value", this.ThumbnailClickAction.ToString());

            node = root.AppendChild(doc.CreateElement("HideAppWhileWatchingVideo"));
            node.AddAttribute(doc, "value", this.HideAppWhileWatchingVideo.ToString());

            node = root.AppendChild(doc.CreateElement("MarkToDeleteVideoAfterWatching"));
            node.AddAttribute(doc, "value", this.MarkToDeleteVideoAfterWatching.ToString());

            node = root.AppendChild(doc.CreateElement("OpenLinksInInternalBrowser"));
            node.AddAttribute(doc, "value", this.OpenLinksInInternalBrowser.ToString());

            node = root.AppendChild(doc.CreateElement("AllowInternalBrowserNavigation"));
            node.AddAttribute(doc, "value", this.AllowInternalBrowserNavigation.ToString());

            node = root.AppendChild(doc.CreateElement("CloseInternalBrowserPageWhenVideoUnfocused"));
            node.AddAttribute(doc, "value", this.CloseInternalBrowserPageWhenVideoUnfocused.ToString());

            node = root.AppendChild(doc.CreateElement("AltTabWindowInsteadOfHiding"));
            node.AddAttribute(doc, "value", this.AltTabWindowInsteadOfHiding.ToString());

            node = root.AppendChild(doc.CreateElement("AutoGeneratedPlaylistID"));
            node.AddAttribute(doc, "value", this.AutoGeneratedPlaylistID);

            return root;
        }
    }
}
