using System;
using System.ComponentModel;
using System.Windows.Forms;
using BBA.VisualComponents;
using GmailToYoutube.BBA.VisualComponents;
using Google.Apis.YouTube.v3;
using Google.Apis.YouTube.v3.Data;

namespace GmailToYoutube
{
    public partial class FPlaylistCreateAndOpen : MyForm
    {
        private FViewer viewerForm;

        public FPlaylistCreateAndOpen(FViewer viewerForm)
        {
            InitializeComponent();
            this.viewerForm = viewerForm;

            SetControlForegroundColor(MyGUIs.Accent.Highlighted.Color,
                label1);
            SetControlForegroundColor(MyGUIs.Text.Normal.Color,
                stepL);
        }

        private void FPlaylistCreateAndOpen_Load(object sender, EventArgs e)
        {
            this.workBgW.RunWorkerAsync(this.viewerForm.Database);
        }

        // work
        private void workBgW_DoWork(object sender, DoWorkEventArgs e)
        {
            workBgW.ReportProgress(0, "Initializing...");

            Database database = e.Argument as Database;
            string playlistTitle = "Gmail-to-Youtube playlist (" + DateTime.Now.ToString("yyyy-MM-dd HH:mm") + ")";
            Playlist playlist = null;

            if (database.PlaylistVideos.Count == 0)
            {
                MessageBox.Show("Uhm, you should add some videos to the playlist first.", "Empty playlist", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                workBgW.ReportProgress(0, "Cancelling...");
                return;
            }

            if (database.Settings.AutoGeneratedPlaylistID != null)
            {
                workBgW.ReportProgress(0, "Retrieving playlist...");

                PlaylistsResource.ListRequest listRequest = ConnectionUtils.YouTubeService.Playlists.List("snippet");
                listRequest.Id = database.Settings.AutoGeneratedPlaylistID;
                PlaylistListResponse listResponse = listRequest.Execute();
                if (listResponse.Items.Count > 0)
                {
                    playlist = listResponse.Items[0];
                    playlist.Snippet.Title = playlistTitle;
                    PlaylistsResource.UpdateRequest updateRequest = ConnectionUtils.YouTubeService.Playlists.Update(playlist, "snippet");
                    playlist = updateRequest.Execute();
                }
            }

            if (playlist == null)
            {
                workBgW.ReportProgress(0, "Creating new playlist...");

                playlist = new Playlist();
                playlist.Snippet = new PlaylistSnippet() { Title = playlistTitle, Description = "by BogdanBBA" };
                playlist.Status = new PlaylistStatus() { PrivacyStatus = "private" };
                playlist = ConnectionUtils.YouTubeService.Playlists.Insert(playlist, "snippet,status").Execute();
                database.Settings.AutoGeneratedPlaylistID = playlist.Id;
            }

            workBgW.ReportProgress(0, "Cleaning up playlist...");

            PlaylistItemsResource.ListRequest itemsListRequest = ConnectionUtils.YouTubeService.PlaylistItems.List("snippet");
            itemsListRequest.PlaylistId = playlist.Id;
            PlaylistItemListResponse itemsListResponse = itemsListRequest.Execute();
            for (int iItem = 0; iItem < itemsListResponse.Items.Count; iItem++)
            {
                workBgW.ReportProgress(0, string.Format("Cleaning up playlist ({0}/{1})...", iItem + 1, itemsListResponse.Items.Count));

                PlaylistItem item = itemsListResponse.Items[iItem];
                PlaylistItemsResource.DeleteRequest itemDeleteRequest = ConnectionUtils.YouTubeService.PlaylistItems.Delete(item.Id);
                itemDeleteRequest.Execute();
            }

            for (int iVideo = 0; iVideo < database.PlaylistVideos.Count; iVideo++)
            {
                workBgW.ReportProgress(0, string.Format("Adding videos to playlist ({0}/{1})...", iVideo + 1, database.PlaylistVideos.Count));
                VideoSummary video = database.PlaylistVideos[iVideo];

                PlaylistItem playlistItem = new PlaylistItem();
                playlistItem.Snippet = new PlaylistItemSnippet() { PlaylistId = playlist.Id };
                playlistItem.Snippet.ResourceId = new ResourceId() { Kind = "youtube#video", VideoId = video.ID };
                playlistItem = ConnectionUtils.YouTubeService.PlaylistItems.Insert(playlistItem, "snippet").Execute();
            }

            workBgW.ReportProgress(0, "Opening playlist...");

            string url = string.Format(@"{0}&list={1}", database.PlaylistVideos[0].YoutubeLink(database.Settings), playlist.Id);
            this.viewerForm.OpenInternetPlace(url, null);
        }

        // report progress
        private void workBgW_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            stepL.Text = e.UserState as string;
            stepPB.Value = e.ProgressPercentage;
        }

        // completed
        private void workBgW_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            this.closeT.Enabled = true;
        }

        // close
        private void closeT_Tick(object sender, EventArgs e)
        {
            this.closeT.Enabled = false;
            this.viewerForm.RefreshInformation(false);
            if (this.viewerForm.Database.Settings.HideAppWhileWatchingVideo && !this.viewerForm.Database.Settings.AltTabWindowInsteadOfHiding)
                this.viewerForm.hideB_Click(sender, e);
            this.Close();
        }
    }
}
